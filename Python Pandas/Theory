Introdution to pandas
---------------------------

> Pandas is software library which mainly used for data manipulation and analysis.
> Pandas works in tabulated data
> It is capable of 2-d table object called dataframe
> pandas data structures are of 3 types -- series, dataframes and panel.
> Series represents 1D  data
> Dataframes represents 2D data
> Panel represents 3D data


Importing pandas
----------------
import pandas --- importing pandas module
print(pandas.__version__) --- to know the pandas version installed on your computer



Load the data from excel file
-----------------

import pandas as pd                 ---- (  here pd is an alias name for pandas)
d = pd.read_excel("File location")   --- (note: whenever you give location of excel file in python ,\ is taken as constant So change it to \\)
                                                                          ex: C:\Users\vicky\OneDrive\Desktop 
                                                             change it to     C:\\Users\\vicky\\OneDrive\\Desktop   
                                                             
df = pd.DataFrame(d)                ---(df is a dataframe create your file will be loaded in df variable)
                                                             
                                                             
Load the data from csv file
-----------------

import pandas as pd                 ---- (  here pd is an alias name for pandas)
d = pd.read_excel("File location")   --- (note: whenever you give location of csv  file in python ,\ is taken as constant So change it to \\)
                                                                          ex: C:\Users\vicky\OneDrive\Desktop 
                                                             change it to     C:\\Users\\vicky\\OneDrive\\Desktop   
                                                             
df = pd.DataFrame(d)                ---(df is a dataframe create your file will be loaded in df variable)



Creating Dataframe using dictionary
-----------------

di = {"Name":["abc","efg","hij", "Roll_No":[1,2,3], "Marks": [90,65,82]}    now dictionary table is saved in di variable

df = pd.DataFrame(di)              --- now the table data into Dataframe using pandas function


Creating Dataframe using list of tuples
-----------------

di = {"Name":["abc","efg","hij", "Roll_No":[1,2,3], "Marks": [90,65,82]}    now dictionary table is saved in di variable

df = pd.DataFrame(di)              --- now the table data into Dataframe using pandas function


Indexing & Slicing
------------------
Syntax: data_frame.head(no_of_rows)
df.head()  -> displays the top 5 rows
df.head(2) -> displays the first 2 rows
df.head(10) -> displays first 10 rows

Syntax: data_frame.tail(no_of_rows)
df.tail()  -> displays last 5 rows
df.tail(2) -> displays last 2 rows
df.tail(10) -> displays last  10 rows

Syntax: data_frame.describe()
df.describe() -> gives information of each every coulmn count, mean, max, min, 25%,50%,75% and etc

Syntax: data_frame.shape()
df.shape()  -> gives information about rows and columns result would be 20, 7 (means 20 rows 7 coulmns)

Syntax: data_frame[start:stop:step]
df[0:10:1]   -> Displays the rows with 0th index number (while creating dataframe the additional column will be added  starting with 0) and ends displays till 
                9th index number, with 1 difference of rows , so all the 1st 10 rows will be displayed
df[0:10:2]   -> Displays the rows with 0th index number and ends displays till 9th index number, with 2 difference of rows, so only even rows will be displayed with 
                index numbers 0,2,4,6,8  and 10 will not displyed becoz we need to stop at 10
                
Syntax: data_frame[Column_name]
df["marks"]  -> Displays only marks column from table

Syntax: data_frame[[column_name,column_name]]
df[["student_name","marks"]]    ->Displays student_name, marks column in table

Syntax : data_frame[[column_name,column_name]][start:stop:step]
df[["student_name","marks"]][0:10:2]  -> Displays student_name, marks column in table. Displays the rows with 0th index number and ends displays till 9th index number, with 2 difference of rows, so only even rows will be displayed with 
                index numbers 0,2,4,6,8  and 10 will not displyed becoz we need to stop at 10

Syntax :data_frame.iterrows()  -> Displays individual information in a tuple format
for rec in df.iterrows():
      print(rec)

                                                             
Understanding loc & iloc
------------------------
Loc -- stop index will be included,column are represented as column_name


Syntax : data_frame.loc[row_number]
df.loc[1] -> displays information of index 1 row
df.loc[5] -> displays information of index 5 row

Syntax: data_frame.loc[row_number,[column_name,...]]
df.loc[1,["student_name","marks"]]               -> Displays the information of studentname and marks of index 1 row
df.loc[3,["student_name","Roll_no","marks"]]     -> Displays the information of studentname, roll_no and marks of index 3 row

Syntax: data_frame.loc[start:stop]
df.loc[0:5]   --> displays information from index 0 to 5 rows where index 5  row is also included

Syntax: data_frame.loc[start:stop,"column_name"]  
df.loc[0:5, "student_name"] --> displays information from index 0 to 5 rows where index 5  row is also included and with column studentname

Syntax: data_frame.loc[start:stop,[col1,col2,...]] 
df.loc[0:5,["student_name", "marks"]] --> displays information from index 0 to 5 rows where index 5  row is also included and with column studentname, marks

Syntax: data_frame.loc[start:stop, "col1":"coln"]
df.loc[0:5,"student_name" : "percentage"] --> displays info of the rows till the index is 5 and columns starting student_name to percentage in between these two coloumns 
                                              all will be displayed
                                              
                                              
 iloc -- stop index will be excluded, column are represented as column_number
 
 Syntax: data_frame.iloc[row_number,col_num]
 df.iloc[0,4] -> displays the row index 0 and col index 4 it can be number or name , just shows the value of it
 
 Syntax: data_frame.iloc[row_start:row_stop,col_start:col_stop]
 df.iloc[0:5,0:3]       ->Displays the rows still index 4, displays index 3 cols 
 
 Syntax: data_frame.iloc[start:stop, "col_num"]
 df.iloc[0:3,1]     -> Displays the rows still index value is 2 and index col 1
 
 Syntax: data_frame.iloc[ [row_1, row_2,...]]
 df.iloc[[1,2,3]]  -> Displys the rows with index value 1,2,3
 
 Syntax: data_frame.iloc[:,[col_1,col_2,...]]
 df.iloc[:,[1,3,5]]      -> displays all the rows with col_num 1,3,5
 
 Syntax: data_frame.iloc[start:stop,[col_1,col_2,...]]
 df.iloc[0:7,[1,3,4,5]] -> Displys all the rows from index num 0 to 6 and col num 1,3,4,5
 
 
 Diff btw loc and iloc
 ----------------------
 
 Loc     |     iloc
 -------------------
 stop    |    stop
 index   |    index
 include |  exclude
 --------------------
 col_name| col_num
 --------------------
 
 
 
 Sorting dataframe
 -----------------
 
 data_frame.sort_values("col_name")
 df.sort_values("maths") -> col sort will be done from asc to desc order
 
 data_frame.sort_values("col_name",ascending=False)
 df.sort_values("maths",ascending=False)      -> col sort will be done from desc to asc
 
 data_frame.sort_values(["col_1","col_2"])
 df.sort_values("studentname", "maths")    -> col sort will be done as studentname col_1 from asc to desc, maths col_2 will be sorted accoring to col_1
 
 
 Manipulating dataframe
 ----------------------
 Adding Column
 ---------
 
 data_frame['new_col_name'] = default_value
 df["total"] = 0           -> additional col "total"  with 0 value in all the rows
 
 data_frame['new_col_name'] = expression/condition
 df["total"] = df["telugu"] + df["maths"] + df["social"]+ df["science"]+ df["GK"]   -> give total marks of the subjects and total saved in the respective new total col
 
 Removing column
 ------------
 Data_frame.drop(columns="col_name")
 df.drop(columns="Total")       -> just removes the colmn temporarily
 
 Data_frame.drop(columns="col_name", inplace=True)
 df.drop(columns="total", inplace=True)  -> removes the colmn completely
 
 
 Remove Duplicates
 ------------------
 
 Knowing Duplicates
 ---------------
 >Data_frame.duplicated() - boolean result if erything is false then no duplicates are found
                                           if evrything is true or some are true then duplicate sare found
  df.duplicated()
 
 >Data_frame.drop_duplicates()        > duplicate rows will be removed, but temporarily removed
  df.drop_duplicates()
  
 >Data_frame.drop_duplicates(inplace="true") > duplicate rows will be removed permanently
 df.drop_duplicates(inplace="true")
 
 
 
 Handling Missing Data
 ---------------------
 
 REMOVING MISSING DATA
 --------------------
 >Data_Frame.dropna()
 df.dropna()            -> removes the rows with null values temporarily
 
 >Data_frame.dropna(inplace=True)
 df.dropna(inplace=True) -> removes   the rows with null values permanently
 
 Fill WITH DEFAULT VALUES
 -----------------------
 >Data_Frame.fillna(Default_value)
 df.fillna(80)     -> So the missing values  are  filled with 80
 
 df["Social"].fillna(80)    -> So the missing values in Social column are filled with 80
 
 
 
 DATA FILTERING & CONDITIONAL CHANGES
 -------------------------------------
 Data_frame.loc[simple_condition]
 df.loc[df["maths"]<85] -> displayes students scored less than 85
 
 Data_frame.loc[compound_condition]
 df.loc[(df["maths"]>60) & (df["maths"]<85)] 
 
 Data_frame.loc[simple_condition.str.contains(str)]
 df.loc[df["studentname"].str.contains("n")]       -> displays the student name  which contains n
 
 Data_frame.loc[simple_condition.str.startswith(str)]
 df.loc[df["studentname"].str.startswith("n")] 
 
 Data_frame.loc[simple_condition.str.endswith(str)]
 df.loc[df["studentname"].str.endswith("n")] 
 
 
 Export DataFrames
 -----------------
 Data_Frame.to_excel(PATH)
 df.to_excel(C:\\Users\\vicky\\OneDrive\\Desktop) ---> result in excel will be with index col
 
 Data_Frame.to_excel(PATH,index=False)
 df.to_excel(C:\\Users\\vicky\\OneDrive\\Desktop, index=False)  -> result in excel without index col
 
 Data_frame.to_csv(PATH)
 df.to_excel(C:\\Users\\vicky\\OneDrive\\Desktop) ---> result in excel will be with index col
 
 Data_Frame.to_csv(PATH,index=False)
 df.to_excel(C:\\Users\\vicky\\OneDrive\\Desktop) ---> result in excel will be without index col
 
 
 

                                                           
